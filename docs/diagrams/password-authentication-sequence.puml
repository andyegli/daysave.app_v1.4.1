@startuml password-authentication-sequence
!theme plain
title Password Authentication Process - DaySave

actor User as U
participant "Login Form" as LF
participant "Auth Router" as AR
participant "Validation Middleware" as VM
participant "User Model" as UM
participant "bcrypt" as BC
participant "Session Store" as SS
participant "2FA Service" as TFA
participant "Email Service" as ES
participant "Dashboard" as D

== User Registration ==
U -> LF: Fill registration form\n(username, email, password, confirmPassword)
LF -> AR: POST /auth/register
AR -> VM: Validate input data
VM -> VM: Check username length (3-30 chars)
VM -> VM: Validate email format
VM -> VM: Check password strength\n(min 8 chars, uppercase, lowercase, number, special)
VM -> VM: Confirm password match

alt Validation fails
    VM -> LF: Return validation errors
    LF -> U: Display error messages
else Validation passes
    AR -> UM: Check existing user\n(username or email)
    
    alt User already exists
        UM -> AR: User found
        AR -> LF: Return "Username or email already in use"
        LF -> U: Display error
    else User doesn't exist
        UM -> AR: No existing user
        AR -> BC: Hash password (saltRounds: 10)
        BC -> AR: Return password_hash
        AR -> UM: Create new user\n(username, email, password_hash, email_verification_token)
        UM -> AR: User created successfully
        AR -> ES: Send verification email
        ES -> U: Email with verification link
        AR -> LF: Registration successful message
        LF -> U: "Please check your email to verify account"
    end
end

== Email Verification ==
U -> AR: Click verification link\nGET /auth/verify-email?token=xxx
AR -> UM: Find user by verification token
UM -> AR: Return user or null

alt Token invalid/expired
    AR -> LF: Redirect to login with error
    LF -> U: "Invalid or expired verification link"
else Token valid
    AR -> UM: Update user.email_verified = true
    UM -> AR: User updated
    AR -> LF: Redirect to login with success
    LF -> U: "Email verified successfully"
end

== Password Login ==
U -> LF: Enter credentials\n(username/email, password)
LF -> AR: POST /auth/login
AR -> AR: Validate input (username and password required)

alt Input validation fails
    AR -> LF: Return validation error
    LF -> U: "Please enter both username/email and password"
else Input valid
    AR -> UM: Find user by username OR email
    UM -> AR: Return user or null
    
    alt User not found
        AR -> LF: Return generic error
        LF -> U: "Invalid username/email or password"
    else User found
        AR -> AR: Check email_verified status
        
        alt Email not verified
            AR -> LF: Return verification error
            LF -> U: "Please verify your email before logging in"
        else Email verified
            AR -> BC: Compare password with stored hash
            BC -> AR: Return validation result
            
            alt Password invalid
                AR -> LF: Return generic error
                LF -> U: "Invalid username/email or password"
            else Password valid
                AR -> AR: Check if 2FA enabled (user.totp_enabled)
                
                alt 2FA enabled
                    AR -> SS: Store pending user data\n(pendingUserId, pendingUserEmail, pendingUserUsername)
                    SS -> AR: Session updated
                    AR -> LF: Redirect to /auth/verify-2fa
                    LF -> U: Show 2FA verification form
                    
                    == 2FA Verification ==
                    U -> LF: Enter 6-digit TOTP code
                    LF -> AR: POST /auth/verify-2fa
                    AR -> SS: Check pendingUserId in session
                    
                    alt No pending session
                        AR -> LF: Redirect to login
                        LF -> U: "Session expired. Please log in again"
                    else Pending session exists
                        AR -> AR: Validate TOTP code format (6 digits)
                        
                        alt Invalid format
                            AR -> LF: Return format error
                            LF -> U: "Please enter a valid 6-digit verification code"
                        else Valid format
                            AR -> UM: Get user by pendingUserId
                            UM -> AR: Return user
                            AR -> TFA: Verify TOTP code using user.totp_secret
                            TFA -> AR: Return verification result
                            
                            alt TOTP invalid
                                AR -> LF: Return verification error
                                LF -> U: "Invalid verification code. Please try again"
                            else TOTP valid
                                AR -> SS: Create authenticated session (req.login)
                                SS -> AR: Session created
                                AR -> SS: Clear pending session data
                                SS -> AR: Pending data cleared
                                AR -> D: Redirect to /dashboard
                                D -> U: Show dashboard
                            end
                        end
                    end
                    
                else 2FA disabled
                    AR -> SS: Create authenticated session (req.login)
                    SS -> AR: Session created
                    AR -> D: Redirect to /dashboard
                    D -> U: Show dashboard
                end
            end
        end
    end
end

== Password Reset Flow ==
U -> LF: Click "Forgot Password"
LF -> AR: GET /auth/forgot-password
AR -> LF: Show forgot password form
LF -> U: Display form

U -> LF: Enter email/username
LF -> AR: POST /auth/forgot-password
AR -> AR: Validate identifier format (email or username)

alt Invalid format
    AR -> LF: Return format error
    LF -> U: "Please enter a valid email address or username"
else Valid format
    AR -> UM: Find user by email or username
    UM -> AR: Return user or null
    
    note right: Always show success message\nfor security (don't reveal if user exists)
    
    alt User found
        AR -> AR: Generate reset token (crypto.randomBytes)
        AR -> UM: Store token in user.email_verification_token
        UM -> AR: Token stored
        AR -> ES: Send password reset email with token
        ES -> U: Email with reset link
    end
    
    AR -> LF: Show success message
    LF -> U: "If account exists, you will receive reset instructions"
end

== Password Reset Completion ==
U -> AR: Click reset link\nGET /auth/reset-password?token=xxx
AR -> UM: Find user by reset token
UM -> AR: Return user or null

alt Token invalid or expired (>1 hour)
    AR -> LF: Redirect to forgot password with error
    LF -> U: "Invalid or expired reset link"
else Token valid
    AR -> LF: Show reset password form
    LF -> U: Display new password form
    
    U -> LF: Enter new password and confirmation
    LF -> AR: POST /auth/reset-password
    AR -> AR: Validate passwords (match, min 8 chars)
    
    alt Validation fails
        AR -> LF: Return validation errors
        LF -> U: Display password requirements
    else Validation passes
        AR -> BC: Hash new password (saltRounds: 12)
        BC -> AR: Return new password_hash
        AR -> UM: Update user password and clear token
        UM -> AR: Password updated
        AR -> LF: Redirect to login with success
        LF -> U: "Password reset successful. You can now log in"
    end
end

@enduml
