<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>System Logs - Admin - DaySave</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
  
  <style>
    .log-entry {
      font-family: 'Courier New', monospace;
      font-size: 0.85rem;
      border-left: 3px solid #dee2e6;
      margin-bottom: 0.5rem;
      transition: all 0.3s ease;
    }
    
    .log-entry.level-error {
      border-left-color: #dc3545;
      background-color: #f8d7da;
    }
    
    .log-entry.level-warn {
      border-left-color: #ffc107;
      background-color: #fff3cd;
    }
    
    .log-entry.level-info {
      border-left-color: #0dcaf0;
      background-color: #d1ecf1;
    }
    
    .log-entry.level-debug {
      border-left-color: #6c757d;
      background-color: #f8f9fa;
    }
    
    .log-entry.channel-multimedia {
      border-left-color: #6f42c1;
    }
    
    .log-entry.channel-auth {
      border-left-color: #198754;
    }
    
    .log-entry.channel-api {
      border-left-color: #fd7e14;
    }
    
    .log-entry.channel-system {
      border-left-color: #dc3545;
    }
    
    .log-entry.new-entry {
      animation: highlight 2s ease-in-out;
    }
    
    @keyframes highlight {
      0% { background-color: #fff3cd; transform: scale(1.02); }
      100% { background-color: transparent; transform: scale(1); }
    }
    
    .log-container {
      height: 70vh;
      overflow-y: auto;
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 0.375rem;
    }
    
    .filter-panel {
      background-color: #fff;
      border: 1px solid #dee2e6;
      border-radius: 0.375rem;
      padding: 1rem;
      margin-bottom: 1rem;
    }
    
    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      display: inline-block;
      margin-right: 0.5rem;
    }
    
    .status-indicator.connected {
      background-color: #198754;
      animation: pulse 2s infinite;
    }
    
    .status-indicator.disconnected {
      background-color: #dc3545;
    }
    
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.5; }
      100% { opacity: 1; }
    }
    
    .log-metadata {
      font-size: 0.75rem;
      color: #6c757d;
    }
    
    .log-message {
      font-weight: 500;
      margin: 0.25rem 0;
    }
    
    .log-details {
      font-size: 0.8rem;
      color: #495057;
      background-color: rgba(0,0,0,0.05);
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      margin-top: 0.25rem;
    }
  </style>
</head>
<body>
  <!-- Header Include -->
  <%- include('../partials/header', { user, title: 'System Logs - Admin' }) %>

  <div class="container-fluid mt-4">
    <div class="row">
      <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
          <h2 class="fw-bold">
            <i class="bi bi-journal-text me-2"></i>System Logs
          </h2>
          <div class="d-flex align-items-center">
            <span class="status-indicator connected" id="connectionStatus"></span>
            <span id="connectionText">Connected</span>
            <button class="btn btn-outline-primary btn-sm ms-3" onclick="clearLogs()">
              <i class="bi bi-trash me-1"></i>Clear Display
            </button>
            <button class="btn btn-outline-success btn-sm ms-2" onclick="exportLogs()">
              <i class="bi bi-download me-1"></i>Export
            </button>
          </div>
        </div>

        <!-- Filter Panel -->
        <div class="filter-panel">
          <div class="row g-3">
            <div class="col-md-2">
              <label for="channelFilter" class="form-label">Channel</label>
              <select class="form-select form-select-sm" id="channelFilter" onchange="applyFilters()">
                <option value="all">All Channels</option>
                <option value="multimedia">Multimedia</option>
                <option value="auth">Authentication</option>
                <option value="content">Content</option>
                <option value="api">API</option>
                <option value="system">System</option>
              </select>
            </div>
            <div class="col-md-2">
              <label for="levelFilter" class="form-label">Level</label>
              <select class="form-select form-select-sm" id="levelFilter" onchange="applyFilters()">
                <option value="all">All Levels</option>
                <option value="error">Error</option>
                <option value="warn">Warning</option>
                <option value="info">Info</option>
                <option value="debug">Debug</option>
              </select>
            </div>
            <div class="col-md-2">
              <label for="userFilter" class="form-label">User ID</label>
              <input type="text" class="form-control form-control-sm" id="userFilter" placeholder="Filter by user" onkeyup="applyFilters()">
            </div>
            <div class="col-md-3">
              <label for="searchFilter" class="form-label">Search</label>
              <input type="text" class="form-control form-control-sm" id="searchFilter" placeholder="Search logs..." onkeyup="applyFilters()">
            </div>
            <div class="col-md-2">
              <label for="limitFilter" class="form-label">Limit</label>
              <select class="form-select form-select-sm" id="limitFilter" onchange="applyFilters()">
                <option value="50">50 entries</option>
                <option value="100" selected>100 entries</option>
                <option value="200">200 entries</option>
                <option value="500">500 entries</option>
              </select>
            </div>
            <div class="col-md-1">
              <label class="form-label">&nbsp;</label>
              <div>
                <button class="btn btn-primary btn-sm w-100" onclick="refreshLogs()">
                  <i class="bi bi-arrow-clockwise"></i>
                </button>
              </div>
            </div>
          </div>
          <div class="row mt-2">
            <div class="col-12">
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="liveMode" checked onchange="toggleLiveMode()">
                <label class="form-check-label" for="liveMode">
                  Live Mode (Real-time updates)
                </label>
              </div>
            </div>
          </div>
        </div>

        <!-- Log Statistics -->
        <div class="row mb-3">
          <div class="col-md-3">
            <div class="card text-center">
              <div class="card-body py-2">
                <h6 class="card-title mb-0">Total Logs</h6>
                <span class="h5 text-primary" id="totalLogs">0</span>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card text-center">
              <div class="card-body py-2">
                <h6 class="card-title mb-0">Errors</h6>
                <span class="h5 text-danger" id="errorCount">0</span>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card text-center">
              <div class="card-body py-2">
                <h6 class="card-title mb-0">Active Users</h6>
                <span class="h5 text-success" id="activeUsers">0</span>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card text-center">
              <div class="card-body py-2">
                <h6 class="card-title mb-0">Last Update</h6>
                <span class="h6 text-muted" id="lastUpdate">Never</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Log Container -->
        <div class="log-container p-3" id="logContainer">
          <div class="text-center text-muted">
            <i class="bi bi-hourglass-split"></i>
            Loading logs...
          </div>
        </div>

        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-3">
          <div>
            <span class="text-muted" id="paginationInfo">Showing 0 of 0 entries</span>
          </div>
          <nav>
            <ul class="pagination pagination-sm mb-0" id="pagination">
              <!-- Pagination will be populated by JavaScript -->
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>

  <!-- Footer Include -->
  <%- include('../partials/footer') %>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    let currentPage = 1;
    let totalPages = 1;
    let isLiveMode = true;
    let eventSource = null;
    let logs = [];
    let filteredLogs = [];

    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      loadLogs();
      if (isLiveMode) {
        startLiveMode();
      }
    });

    // Load logs from API
    async function loadLogs(page = 1) {
      try {
        const filters = getFilters();
        const params = new URLSearchParams({
          ...filters,
          page: page
        });

        const response = await fetch(`/admin/api/logs?${params}`, {
      credentials: 'include'
    });
        const data = await response.json();

        if (data.success) {
          logs = data.logs;
          filteredLogs = logs;
          currentPage = data.page;
          totalPages = data.totalPages;
          
          renderLogs();
          updateStatistics();
          updatePagination();
        } else {
          showError('Failed to load logs');
        }
      } catch (error) {
        console.error('Error loading logs:', error);
        showError('Error loading logs');
      }
    }

    // Get current filter values
    function getFilters() {
      return {
        channel: document.getElementById('channelFilter').value,
        level: document.getElementById('levelFilter').value,
        userId: document.getElementById('userFilter').value,
        search: document.getElementById('searchFilter').value,
        limit: document.getElementById('limitFilter').value
      };
    }

    // Apply filters and reload logs
    function applyFilters() {
      currentPage = 1;
      loadLogs(1);
    }

    // Refresh logs
    function refreshLogs() {
      loadLogs(currentPage);
    }

    // Clear log display
    function clearLogs() {
      document.getElementById('logContainer').innerHTML = '<div class="text-center text-muted"><i class="bi bi-inbox"></i><br>Log display cleared</div>';
      logs = [];
      filteredLogs = [];
      updateStatistics();
    }

    // Toggle live mode
    function toggleLiveMode() {
      isLiveMode = document.getElementById('liveMode').checked;
      
      if (isLiveMode) {
        startLiveMode();
      } else {
        stopLiveMode();
      }
    }

    // Start live mode (Server-Sent Events)
    function startLiveMode() {
      if (eventSource) {
        eventSource.close();
      }

      const filters = getFilters();
      const params = new URLSearchParams(filters);
      
      eventSource = new EventSource(`/admin/api/logs/stream?${params}`);
      
      eventSource.onopen = function() {
        updateConnectionStatus(true);
      };
      
      eventSource.onmessage = function(event) {
        try {
          const data = JSON.parse(event.data);
          
          if (data.type === 'connected') {
            updateConnectionStatus(true);
          } else if (data.type === 'log') {
            addNewLogEntry(data.data);
          } else if (data.type === 'error') {
            showError(data.message);
          }
        } catch (error) {
          console.error('Error parsing SSE data:', error);
        }
      };
      
      eventSource.onerror = function() {
        updateConnectionStatus(false);
        setTimeout(() => {
          if (isLiveMode) {
            startLiveMode();
          }
        }, 5000);
      };
    }

    // Stop live mode
    function stopLiveMode() {
      if (eventSource) {
        eventSource.close();
        eventSource = null;
      }
      updateConnectionStatus(false);
    }

    // Add new log entry (for live mode)
    function addNewLogEntry(logEntry) {
      logs.unshift(logEntry);
      
      // Limit to prevent memory issues
      if (logs.length > 1000) {
        logs = logs.slice(0, 1000);
      }
      
      filteredLogs = logs;
      renderLogs();
      updateStatistics();
      
      // Highlight new entry
      setTimeout(() => {
        const firstEntry = document.querySelector('.log-entry');
        if (firstEntry) {
          firstEntry.classList.add('new-entry');
        }
      }, 100);
    }

    // Update connection status
    function updateConnectionStatus(connected) {
      const statusIndicator = document.getElementById('connectionStatus');
      const statusText = document.getElementById('connectionText');
      
      if (connected) {
        statusIndicator.className = 'status-indicator connected';
        statusText.textContent = 'Connected';
      } else {
        statusIndicator.className = 'status-indicator disconnected';
        statusText.textContent = 'Disconnected';
      }
    }

    // Render logs in the container
    function renderLogs() {
      const container = document.getElementById('logContainer');
      
      if (filteredLogs.length === 0) {
        container.innerHTML = '<div class="text-center text-muted"><i class="bi bi-inbox"></i><br>No logs found</div>';
        return;
      }

      const logsHtml = filteredLogs.map(log => {
        const timestamp = new Date(log.timestamp).toLocaleString();
        const level = log.level || 'info';
        const channel = log.channel || 'system';
        const message = log.message || '';
        
        // Extract metadata
        const metadata = { ...log };
        delete metadata.timestamp;
        delete metadata.level;
        delete metadata.message;
        delete metadata.channel;
        
        const hasMetadata = Object.keys(metadata).length > 0;
        
        return `
          <div class="log-entry level-${level} channel-${channel} p-2 mb-2 rounded">
            <div class="log-metadata d-flex justify-content-between">
              <span>
                <strong>${timestamp}</strong>
                <span class="badge bg-${getLevelColor(level)} ms-2">${level.toUpperCase()}</span>
                <span class="badge bg-secondary ms-1">${channel}</span>
                ${log.userId ? `<span class="badge bg-primary ms-1">User: ${log.userId}</span>` : ''}
              </span>
            </div>
            <div class="log-message">${escapeHtml(message)}</div>
            ${hasMetadata ? `
              <div class="log-details">
                <pre class="mb-0">${JSON.stringify(metadata, null, 2)}</pre>
              </div>
            ` : ''}
          </div>
        `;
      }).join('');

      container.innerHTML = logsHtml;
      
      // Update last update time
      document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
    }

    // Get Bootstrap color class for log level
    function getLevelColor(level) {
      switch (level) {
        case 'error': return 'danger';
        case 'warn': return 'warning';
        case 'info': return 'info';
        case 'debug': return 'secondary';
        default: return 'light';
      }
    }

    // Update statistics
    function updateStatistics() {
      document.getElementById('totalLogs').textContent = logs.length;
      
      const errorCount = logs.filter(log => log.level === 'error').length;
      document.getElementById('errorCount').textContent = errorCount;
      
      const uniqueUsers = new Set(logs.filter(log => log.userId).map(log => log.userId)).size;
      document.getElementById('activeUsers').textContent = uniqueUsers;
    }

    // Update pagination
    function updatePagination() {
      const paginationInfo = document.getElementById('paginationInfo');
      const pagination = document.getElementById('pagination');
      
      const start = (currentPage - 1) * parseInt(getFilters().limit) + 1;
      const end = Math.min(start + logs.length - 1, logs.length);
      
      paginationInfo.textContent = `Showing ${start}-${end} of ${logs.length} entries`;
      
      // Generate pagination HTML
      let paginationHtml = '';
      
      if (totalPages > 1) {
        // Previous button
        paginationHtml += `
          <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Previous</a>
          </li>
        `;
        
        // Page numbers
        for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
          paginationHtml += `
            <li class="page-item ${i === currentPage ? 'active' : ''}">
              <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
            </li>
          `;
        }
        
        // Next button
        paginationHtml += `
          <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Next</a>
          </li>
        `;
      }
      
      pagination.innerHTML = paginationHtml;
    }

    // Change page
    function changePage(page) {
      if (page >= 1 && page <= totalPages && page !== currentPage) {
        loadLogs(page);
      }
    }

    // Export logs
    function exportLogs() {
      const filters = getFilters();
      const params = new URLSearchParams({
        ...filters,
        limit: 10000, // Export more logs
        export: 'csv'
      });
      
      window.open(`/admin/api/logs?${params}`, '_blank');
    }

    // Show error message
    function showError(message) {
      const container = document.getElementById('logContainer');
      container.innerHTML = `<div class="alert alert-danger"><i class="bi bi-exclamation-triangle"></i> ${message}</div>`;
    }

    // Escape HTML
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Handle page unload
    window.addEventListener('beforeunload', function() {
      if (eventSource) {
        eventSource.close();
      }
    });
  </script>
</body>
</html> 