<%- include('../partials/header') %>

<div class="container mt-4">
  <div class="row">
    <div class="col-12">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">
          <i class="bi bi-gear-fill me-2"></i>
          System Tests
        </h1>
        <div>
          <button id="runTestsBtn" class="btn btn-primary">
            <i class="bi bi-play-fill me-2"></i>
            Run Tests
          </button>
          <a href="/admin/users" class="btn btn-secondary">
            <i class="bi bi-arrow-left me-2"></i>
            Back to Admin
          </a>
        </div>
      </div>
      
      <!-- Test Status Card -->
      <div class="card mb-4">
        <div class="card-header">
          <h5 class="card-title mb-0">
            <i class="bi bi-activity me-2"></i>
            Test Status
          </h5>
        </div>
        <div class="card-body">
          <div id="testStatus" class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            Ready to run tests. Click "Run Tests" to start.
          </div>
        </div>
      </div>
      
      <!-- Test Results -->
      <div id="testResultsContainer" class="card" style="display: none;">
        <div class="card-header">
          <h5 class="card-title mb-0">
            <i class="bi bi-clipboard-check me-2"></i>
            Test Results
          </h5>
        </div>
        <div class="card-body">
          <div id="testResults"></div>
        </div>
      </div>
      
      <!-- Test Output Log -->
      <div id="testOutputContainer" class="card mt-4" style="display: none;">
        <div class="card-header">
          <h5 class="card-title mb-0">
            <i class="bi bi-terminal me-2"></i>
            Test Output
          </h5>
        </div>
        <div class="card-body">
          <pre id="testOutput" class="bg-dark text-light p-3 rounded" style="max-height: 400px; overflow-y: auto;"></pre>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const runTestsBtn = document.getElementById('runTestsBtn');
  const testStatus = document.getElementById('testStatus');
  const testResultsContainer = document.getElementById('testResultsContainer');
  const testResults = document.getElementById('testResults');
  const testOutputContainer = document.getElementById('testOutputContainer');
  const testOutput = document.getElementById('testOutput');
  
  runTestsBtn.addEventListener('click', async function() {
    // Disable button and show loading state
    runTestsBtn.disabled = true;
    runTestsBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Running Tests...';
    
    // Update status
    testStatus.className = 'alert alert-warning';
    testStatus.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Running AI Pipeline Tests...';
    
    // Hide previous results
    testResultsContainer.style.display = 'none';
    testOutputContainer.style.display = 'none';
    
    try {
      const response = await fetch('/admin/tests/run', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include'
      });
      
      const data = await response.json();
      
      if (data.success) {
        // Show success status
        testStatus.className = 'alert alert-success';
        testStatus.innerHTML = '<i class="bi bi-check-circle me-2"></i>Tests completed successfully!';
        
        // Display test results
        displayTestResults(data.testResults);
        
        // Display test output
        if (data.output && data.output.length > 0) {
          testOutput.textContent = data.output.join('\n');
          testOutputContainer.style.display = 'block';
        }
        
        testResultsContainer.style.display = 'block';
        
      } else {
        // Show error status
        testStatus.className = 'alert alert-danger';
        testStatus.innerHTML = '<i class="bi bi-x-circle me-2"></i>Tests failed: ' + data.error;
      }
      
    } catch (error) {
      console.error('Error running tests:', error);
      testStatus.className = 'alert alert-danger';
      testStatus.innerHTML = '<i class="bi bi-x-circle me-2"></i>Error running tests: ' + error.message;
    } finally {
      // Re-enable button
      runTestsBtn.disabled = false;
      runTestsBtn.innerHTML = '<i class="bi bi-play-fill me-2"></i>Run Tests';
    }
  });
  
  function displayTestResults(results) {
    let html = '';
    
    // Server Status
    html += '<div class="mb-4">';
    html += '<h6><i class="bi bi-server me-2"></i>Server Status</h6>';
    html += '<div class="badge bg-success">Running and accessible</div>';
    html += '</div>';
    
    // Google Vision API
    html += '<div class="mb-4">';
    html += '<h6><i class="bi bi-eye me-2"></i>Google Vision API</h6>';
    const googleStatus = results.googleVision.working ? 'success' : 'danger';
    const googleIcon = results.googleVision.working ? 'check-circle' : 'x-circle';
    html += `<div class="badge bg-${googleStatus}"><i class="bi bi-${googleIcon} me-1"></i>${results.googleVision.working ? 'Working' : 'Failed'}</div>`;
    if (results.googleVision.details) {
      html += `<div class="text-muted small mt-1">${results.googleVision.details}</div>`;
    }
    html += '</div>';
    
    // OpenAI Vision API
    html += '<div class="mb-4">';
    html += '<h6><i class="bi bi-robot me-2"></i>OpenAI Vision API</h6>';
    const openaiStatus = results.openaiVision.working ? 'success' : 'danger';
    const openaiIcon = results.openaiVision.working ? 'check-circle' : 'x-circle';
    html += `<div class="badge bg-${openaiStatus}"><i class="bi bi-${openaiIcon} me-1"></i>${results.openaiVision.working ? 'Working' : 'Failed'}</div>`;
    if (results.openaiVision.details) {
      html += `<div class="text-muted small mt-1">${results.openaiVision.details}</div>`;
    }
    html += '</div>';
    
    // Pipeline Test
    html += '<div class="mb-4">';
    html += '<h6><i class="bi bi-arrow-up-circle me-2"></i>Image Upload Pipeline</h6>';
    const pipelineStatus = results.pipeline.working || results.pipeline.details.includes('Authentication required') ? 'success' : 'danger';
    const pipelineIcon = results.pipeline.working || results.pipeline.details.includes('Authentication required') ? 'check-circle' : 'x-circle';
    const pipelineText = results.pipeline.working ? 'Working' : 
                         results.pipeline.details.includes('Authentication required') ? 'Protected (Auth Required)' : 'Failed';
    html += `<div class="badge bg-${pipelineStatus}"><i class="bi bi-${pipelineIcon} me-1"></i>${pipelineText}</div>`;
    if (results.pipeline.details) {
      html += `<div class="text-muted small mt-1">${results.pipeline.details}</div>`;
    }
    html += '</div>';
    
    // Overall Status
    html += '<div class="mb-4">';
    html += '<h6><i class="bi bi-clipboard-check me-2"></i>Overall Status</h6>';
    const googleWorking = results.googleVision.working;
    const openaiWorking = results.openaiVision.working;
    const pipelineWorking = results.pipeline.working || results.pipeline.details.includes('Authentication required');
    
    if (googleWorking && openaiWorking && pipelineWorking) {
      html += '<div class="badge bg-success"><i class="bi bi-check-circle me-1"></i>All systems operational</div>';
      html += '<div class="text-success small mt-1">Fallback System: Fully redundant (Google + OpenAI)</div>';
    } else if ((googleWorking || openaiWorking) && pipelineWorking) {
      html += '<div class="badge bg-warning"><i class="bi bi-exclamation-triangle me-1"></i>Partially operational</div>';
      html += '<div class="text-warning small mt-1">Fallback System: Limited redundancy</div>';
    } else {
      html += '<div class="badge bg-danger"><i class="bi bi-x-circle me-1"></i>Critical issues detected</div>';
      html += '<div class="text-danger small mt-1">Fallback System: Insufficient redundancy</div>';
    }
    html += '</div>';
    
    testResults.innerHTML = html;
  }
});
</script>

<%- include('../partials/footer') %> 