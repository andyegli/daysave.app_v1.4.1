<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Analytics Dashboard - Admin - DaySave</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
  <style>
    .analytics-dashboard {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding-top: 1rem;
    }
    
    .analytics-card {
      background: rgba(255, 255, 255, 0.95);
      border: none;
      border-radius: 15px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      height: 100%;
    }
    
    .analytics-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
    }
    
    .stat-card {
      background: linear-gradient(45deg, #667eea, #764ba2);
      color: white;
      border-radius: 12px;
      padding: 1.5rem;
      text-align: center;
      transition: all 0.3s ease;
    }
    
    .stat-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    }
    
    .stat-number {
      font-size: 2.5rem;
      font-weight: 700;
      margin: 0.5rem 0;
    }
    
    .stat-label {
      font-size: 0.9rem;
      opacity: 0.9;
    }
    
    .chart-container {
      position: relative;
      height: 300px;
      margin: 1rem 0;
    }
    
    .loading-spinner {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 200px;
    }
    
    .refresh-indicator {
      position: absolute;
      top: 10px;
      right: 10px;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background-color: #28a745;
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0% { opacity: 1; transform: scale(1); }
      50% { opacity: 0.5; transform: scale(1.1); }
      100% { opacity: 1; transform: scale(1); }
    }
    
    .metric-badge {
      font-size: 0.8rem;
      padding: 0.25rem 0.5rem;
    }
  </style>
</head>
<body>
  <!-- Header Include -->
  <%- include('../partials/header', { user, title: 'Analytics Dashboard - Admin' }) %>

  <div class="analytics-dashboard">
    <div class="container-fluid">
      
      <!-- Page Header -->
      <div class="row mb-4">
        <div class="col-12">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h2 class="text-white fw-bold mb-0">
                <i class="bi bi-graph-up me-2"></i>Analytics Dashboard
              </h2>
              <p class="text-white-50 mb-0">Real-time system analytics and insights</p>
            </div>
            <div class="d-flex gap-2">
              <button class="btn btn-outline-light btn-sm" onclick="refreshAllData()">
                <i class="bi bi-arrow-clockwise me-1"></i>Refresh
              </button>
              <a href="/admin/dashboard" class="btn btn-outline-light btn-sm">
                <i class="bi bi-arrow-left me-1"></i>Back to Admin
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- Overview Statistics -->
      <div class="row mb-4" id="overviewStats">
        <div class="col-lg-3 col-md-6 mb-3">
          <div class="stat-card">
            <i class="bi bi-people fs-2"></i>
            <div class="stat-number" id="totalUsers">-</div>
            <div class="stat-label">Total Users</div>
            <div class="mt-2">
              <small class="badge bg-light text-dark" id="activeUsers">- active today</small>
            </div>
          </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
          <div class="stat-card">
            <i class="bi bi-files fs-2"></i>
            <div class="stat-number" id="totalContent">-</div>
            <div class="stat-label">Content Items</div>
            <div class="mt-2">
              <small class="badge bg-light text-dark" id="newContent">- this week</small>
            </div>
          </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
          <div class="stat-card">
            <i class="bi bi-activity fs-2"></i>
            <div class="stat-number" id="totalActivity">-</div>
            <div class="stat-label">System Events</div>
            <div class="mt-2">
              <small class="badge bg-light text-dark" id="recentActivity">- in 24h</small>
            </div>
          </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
          <div class="stat-card">
            <i class="bi bi-cpu fs-2"></i>
            <div class="stat-number" id="systemHealth">-</div>
            <div class="stat-label">System Health</div>
            <div class="mt-2">
              <small class="badge bg-light text-dark" id="uptime">- uptime</small>
            </div>
          </div>
        </div>
      </div>

      <!-- Charts Row 1 -->
      <div class="row mb-4">
        <div class="col-lg-6 mb-3">
          <div class="analytics-card">
            <div class="card-body">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title mb-0">
                  <i class="bi bi-graph-up me-2"></i>User Activity Trends
                </h5>
                <div class="refresh-indicator" id="userTrendsRefresh"></div>
              </div>
              <div class="chart-container">
                <canvas id="userActivityChart"></canvas>
              </div>
            </div>
          </div>
        </div>
        <div class="col-lg-6 mb-3">
          <div class="analytics-card">
            <div class="card-body">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title mb-0">
                  <i class="bi bi-pie-chart me-2"></i>User Role Distribution
                </h5>
                <div class="refresh-indicator" id="roleDistRefresh"></div>
              </div>
              <div class="chart-container">
                <canvas id="roleDistributionChart"></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Charts Row 2 -->
      <div class="row mb-4">
        <div class="col-lg-6 mb-3">
          <div class="analytics-card">
            <div class="card-body">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title mb-0">
                  <i class="bi bi-folder me-2"></i>Content Type Distribution
                </h5>
                <div class="refresh-indicator" id="contentStatsRefresh"></div>
              </div>
              <div class="chart-container">
                <canvas id="contentTypesChart"></canvas>
              </div>
            </div>
          </div>
        </div>
        <div class="col-lg-6 mb-3">
          <div class="analytics-card">
            <div class="card-body">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title mb-0">
                  <i class="bi bi-speedometer2 me-2"></i>System Performance
                </h5>
                <div class="refresh-indicator" id="performanceRefresh"></div>
              </div>
              <div id="performanceMetrics">
                <div class="loading-spinner">
                  <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Top Users Table -->
      <div class="row mb-4">
        <div class="col-12">
          <div class="analytics-card">
            <div class="card-body">
              <h5 class="card-title">
                <i class="bi bi-star me-2"></i>Top Users by Storage Usage
              </h5>
              <div class="table-responsive">
                <table class="table table-hover">
                  <thead>
                    <tr>
                      <th>User</th>
                      <th>Files</th>
                      <th>Storage Used</th>
                      <th>Percentage</th>
                    </tr>
                  </thead>
                  <tbody id="topUsersTable">
                    <tr>
                      <td colspan="4" class="text-center">
                        <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                        Loading...
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- System Information -->
      <div class="row mb-4">
        <div class="col-lg-6 mb-3">
          <div class="analytics-card">
            <div class="card-body">
              <h5 class="card-title">
                <i class="bi bi-info-circle me-2"></i>System Information
              </h5>
              <div id="systemInfo">
                <div class="loading-spinner">
                  <div class="spinner-border text-primary" role="status"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="col-lg-6 mb-3">
          <div class="analytics-card">
            <div class="card-body">
              <h5 class="card-title">
                <i class="bi bi-clock-history me-2"></i>Recent Activity Summary
              </h5>
              <div id="activitySummary">
                <div class="loading-spinner">
                  <div class="spinner-border text-primary" role="status"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

    </div>
  </div>

  <!-- Footer Include -->
  <%- include('../partials/footer') %>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    // Chart instances
    let userActivityChart = null;
    let roleDistributionChart = null;
    let contentTypesChart = null;

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
      loadAllData();
      
      // Auto-refresh every 5 minutes
      setInterval(loadAllData, 5 * 60 * 1000);
    });

    // Load all analytics data
    async function loadAllData() {
      try {
        await Promise.all([
          loadOverviewData(),
          loadUserTrends(),
          loadContentStats(),
          loadPerformanceData()
        ]);
      } catch (error) {
        console.error('Error loading analytics data:', error);
        showError('Failed to load analytics data');
      }
    }

    // Load overview statistics
    async function loadOverviewData() {
      try {
        const response = await fetch('/admin/api/analytics/overview', {
          credentials: 'include'
        });
        const data = await response.json();
        
        if (data.success) {
          const overview = data.data;
          
          // Update overview stats
          document.getElementById('totalUsers').textContent = overview.users.total;
          document.getElementById('activeUsers').textContent = `${overview.users.active24h} active today`;
          document.getElementById('totalContent').textContent = overview.content.totalContent;
          document.getElementById('newContent').textContent = `${overview.content.newThisWeek} this week`;
          document.getElementById('totalActivity').textContent = overview.activity.totalEvents;
          document.getElementById('recentActivity').textContent = `${overview.activity.recent24h} in 24h`;
          
          // System health calculation
          const memoryPercentage = Math.round((overview.system.memoryUsage.heapUsed / overview.system.memoryUsage.heapTotal) * 100);
          const healthScore = Math.max(0, 100 - memoryPercentage);
          document.getElementById('systemHealth').textContent = `${healthScore}%`;
          document.getElementById('uptime').textContent = `${Math.round(overview.system.uptime / 3600)}h uptime`;
        }
      } catch (error) {
        console.error('Error loading overview:', error);
      }
    }

    // Load user trends
    async function loadUserTrends() {
      try {
        const response = await fetch('/admin/api/analytics/user-trends?days=30', {
          credentials: 'include'
        });
        const data = await response.json();
        
        if (data.success) {
          updateUserActivityChart(data.data);
          updateRoleDistributionChart(data.data.roleDistribution);
        }
      } catch (error) {
        console.error('Error loading user trends:', error);
      }
    }

    // Load content statistics
    async function loadContentStats() {
      try {
        const response = await fetch('/admin/api/analytics/content-stats', {
          credentials: 'include'
        });
        const data = await response.json();
        
        if (data.success) {
          updateContentTypesChart(data.data.contentTypes);
          updateTopUsersTable(data.data.topUsers);
        }
      } catch (error) {
        console.error('Error loading content stats:', error);
      }
    }

    // Load performance data
    async function loadPerformanceData() {
      try {
        const response = await fetch('/admin/api/analytics/performance?hours=24', {
          credentials: 'include'
        });
        const data = await response.json();
        
        if (data.success) {
          updatePerformanceMetrics(data.data);
          updateSystemInfo(data.data.system);
        }
      } catch (error) {
        console.error('Error loading performance data:', error);
      }
    }

    // Update user activity chart
    function updateUserActivityChart(data) {
      const ctx = document.getElementById('userActivityChart').getContext('2d');
      
      if (userActivityChart) {
        userActivityChart.destroy();
      }
      
      userActivityChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: data.registrations.map(r => new Date(r.date).toLocaleDateString()),
          datasets: [
            {
              label: 'New Registrations',
              data: data.registrations.map(r => r.count),
              borderColor: '#667eea',
              backgroundColor: 'rgba(102, 126, 234, 0.1)',
              tension: 0.4
            },
            {
              label: 'Login Activity',
              data: data.loginActivity.map(a => a.count),
              borderColor: '#764ba2',
              backgroundColor: 'rgba(118, 75, 162, 0.1)',
              tension: 0.4
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }

    // Update role distribution chart
    function updateRoleDistributionChart(data) {
      const ctx = document.getElementById('roleDistributionChart').getContext('2d');
      
      if (roleDistributionChart) {
        roleDistributionChart.destroy();
      }
      
      roleDistributionChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: data.map(r => r.role),
          datasets: [{
            data: data.map(r => r.count),
            backgroundColor: [
              '#667eea',
              '#764ba2',
              '#ff6b6b',
              '#4ecdc4',
              '#45b7d1',
              '#f9ca24'
            ]
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });
    }

    // Update content types chart
    function updateContentTypesChart(data) {
      const ctx = document.getElementById('contentTypesChart').getContext('2d');
      
      if (contentTypesChart) {
        contentTypesChart.destroy();
      }
      
      contentTypesChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: data.map(ct => ct.type),
          datasets: [{
            label: 'Content Count',
            data: data.map(ct => ct.count),
            backgroundColor: 'rgba(102, 126, 234, 0.8)',
            borderColor: '#667eea',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }

    // Update top users table
    function updateTopUsersTable(users) {
      const tbody = document.getElementById('topUsersTable');
      const totalStorage = users.reduce((sum, user) => sum + user.totalSize, 0);
      
      tbody.innerHTML = users.map((user, index) => {
        const percentage = totalStorage > 0 ? ((user.totalSize / totalStorage) * 100).toFixed(1) : 0;
        const sizeInMB = (user.totalSize / (1024 * 1024)).toFixed(1);
        
        return `
          <tr>
            <td>
              <strong>${user.username}</strong>
              <small class="d-block text-muted">${index + 1}${getOrdinalSuffix(index + 1)} place</small>
            </td>
            <td>${user.fileCount} files</td>
            <td>${sizeInMB} MB</td>
            <td>
              <div class="progress" style="height: 6px;">
                <div class="progress-bar" style="width: ${percentage}%"></div>
              </div>
              <small>${percentage}%</small>
            </td>
          </tr>
        `;
      }).join('');
    }

    // Update performance metrics
    function updatePerformanceMetrics(data) {
      const container = document.getElementById('performanceMetrics');
      
      container.innerHTML = `
        <div class="row">
          ${data.performance.map(perf => `
            <div class="col-6 mb-3">
              <div class="text-center p-2 border rounded">
                <h6 class="text-primary">${perf.aiJob}</h6>
                <div class="small text-muted">Avg: ${perf.avgTime}ms</div>
                <div class="small text-muted">${perf.jobCount} jobs</div>
              </div>
            </div>
          `).join('')}
        </div>
        
        <div class="mt-3">
          <h6>Job Status Distribution</h6>
          ${data.jobStatus.map(status => `
            <span class="badge bg-secondary me-2">${status.status}: ${status.count}</span>
          `).join('')}
        </div>
      `;
    }

    // Update system info
    function updateSystemInfo(data) {
      const container = document.getElementById('systemInfo');
      
      container.innerHTML = `
        <div class="row">
          <div class="col-6">
            <strong>Memory Usage:</strong><br>
            <div class="progress mb-2" style="height: 6px;">
              <div class="progress-bar" style="width: ${data.memory.percentage}%"></div>
            </div>
            <small>${data.memory.used}MB / ${data.memory.total}MB</small>
          </div>
          <div class="col-6">
            <strong>Platform:</strong> ${data.platform}<br>
            <strong>Node.js:</strong> ${data.nodeVersion}<br>
            <strong>Uptime:</strong> ${data.uptime}h
          </div>
        </div>
      `;
    }

    // Refresh all data
    function refreshAllData() {
      // Show refresh indicators
      document.querySelectorAll('.refresh-indicator').forEach(indicator => {
        indicator.style.animation = 'pulse 0.5s infinite';
      });
      
      loadAllData().then(() => {
        // Reset indicators
        setTimeout(() => {
          document.querySelectorAll('.refresh-indicator').forEach(indicator => {
            indicator.style.animation = 'pulse 2s infinite';
          });
        }, 1000);
      });
    }

    // Helper functions
    function getOrdinalSuffix(num) {
      const j = num % 10;
      const k = num % 100;
      if (j == 1 && k != 11) return "st";
      if (j == 2 && k != 12) return "nd";
      if (j == 3 && k != 13) return "rd";
      return "th";
    }

    function showError(message) {
      // Simple error notification
      const toast = document.createElement('div');
      toast.className = 'toast position-fixed top-0 end-0 m-3';
      toast.innerHTML = `
        <div class="toast-body bg-danger text-white">
          ${message}
        </div>
      `;
      document.body.appendChild(toast);
      
      setTimeout(() => {
        document.body.removeChild(toast);
      }, 5000);
    }

    function formatBytes(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
  </script>
</body>
</html> 