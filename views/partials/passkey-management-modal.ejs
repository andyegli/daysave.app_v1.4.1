<!-- Passkey Management Modal -->
<div class="modal fade" id="passkeyManagementModal" tabindex="-1" aria-labelledby="passkeyManagementModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content" style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-radius: 20px; border: 1px solid rgba(255, 255, 255, 0.2);">
      <div class="modal-header" style="background: linear-gradient(45deg, #667eea, #764ba2); color: white; border-radius: 20px 20px 0 0;">
        <h5 class="modal-title" id="passkeyManagementModalLabel">
          <i class="fas fa-fingerprint me-2"></i>Manage Passkeys
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      
      <div class="modal-body p-4">
        <!-- Passkey Support Check -->
        <div id="passkeyNotSupported" class="alert alert-warning d-none">
          <i class="fas fa-exclamation-triangle me-2"></i>
          Passkeys are not supported on this device or browser. Please use a compatible device with Face ID, Touch ID, Windows Hello, or a security key.
        </div>

        <!-- Add New Passkey Section -->
        <div id="addPasskeySection" class="card shadow-sm mb-4" style="border-radius: 15px; border: none;">
          <div class="card-body" style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 15px;">
            <div class="d-flex align-items-center mb-3">
              <div class="bg-primary rounded-circle p-3 me-3" style="width: 50px; height: 50px; display: flex; align-items: center; justify-content: center;">
                <i class="fas fa-plus text-white"></i>
              </div>
              <div>
                <h6 class="mb-1 fw-bold">Add New Passkey</h6>
                <small class="text-muted">Set up a new passkey for this device</small>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="newPasskeyName" class="form-label">Device Name (Optional)</label>
              <input type="text" class="form-control" id="newPasskeyName" placeholder="e.g., My iPhone, Work Laptop">
              <div class="form-text">Give this passkey a recognizable name</div>
            </div>
            
            <button type="button" class="btn btn-primary w-100" id="addPasskeyBtn">
              <i class="fas fa-fingerprint me-2"></i>Create Passkey
            </button>
          </div>
        </div>

        <!-- Existing Passkeys Section -->
        <div class="card shadow-sm" style="border-radius: 15px; border: none;">
          <div class="card-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px 15px 0 0;">
            <h6 class="mb-0">
              <i class="fas fa-key me-2"></i>Your Passkeys (<span id="passkeyCount">0</span>)
            </h6>
          </div>
          
          <div class="card-body p-0">
            <div id="passkeyList" class="list-group list-group-flush">
              <!-- Passkeys will be populated here -->
            </div>
            
            <div id="noPasskeysMessage" class="text-center py-4 text-muted">
              <i class="fas fa-key fa-2x mb-3 opacity-50"></i>
              <p class="mb-0">No passkeys configured yet</p>
              <small>Add your first passkey above for enhanced security</small>
            </div>
          </div>
        </div>

        <!-- Recovery Information -->
        <div class="alert alert-info mt-4" style="border-radius: 15px; border: none; background: rgba(13, 202, 240, 0.1);">
          <div class="d-flex align-items-start">
            <i class="fas fa-info-circle text-info me-3 mt-1"></i>
            <div>
              <h6 class="text-info mb-2">About Passkeys</h6>
              <ul class="small mb-0 text-muted">
                <li>Passkeys are more secure than passwords and impossible to phish</li>
                <li>They work with Face ID, Touch ID, Windows Hello, or security keys</li>
                <li>If you lose access to a passkey, you can still sign in with your password or other passkeys</li>
                <li>You can add multiple passkeys for different devices</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
      
      <div class="modal-footer" style="border-top: 1px solid rgba(0,0,0,0.1);">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="refreshPasskeysBtn">
          <i class="fas fa-sync-alt me-2"></i>Refresh
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Passkey Rename Modal -->
<div class="modal fade" id="renamePasskeyModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content" style="border-radius: 15px;">
      <div class="modal-header">
        <h5 class="modal-title">Rename Passkey</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="renamePasskeyInput" class="form-label">Device Name</label>
          <input type="text" class="form-control" id="renamePasskeyInput" maxlength="100">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="savePasskeyNameBtn">Save</button>
      </div>
    </div>
  </div>
</div>

<style>
/* Passkey Management Styles */
.passkey-item {
  transition: all 0.3s ease;
  border-radius: 12px !important;
  margin: 8px;
  background: rgba(255, 255, 255, 0.8);
}

.passkey-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
  background: rgba(255, 255, 255, 0.95);
}

.passkey-device-icon {
  width: 45px;
  height: 45px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  color: white;
  background: linear-gradient(45deg, #667eea, #764ba2);
}

.passkey-device-icon.phone { background: linear-gradient(45deg, #ff6b6b, #ee5a24); }
.passkey-device-icon.laptop { background: linear-gradient(45deg, #4834d4, #6c5ce7); }
.passkey-device-icon.desktop { background: linear-gradient(45deg, #26de81, #20bf6b); }
.passkey-device-icon.tablet { background: linear-gradient(45deg, #fd79a8, #fdcb6e); }
.passkey-device-icon.security_key { background: linear-gradient(45deg, #a29bfe, #6c5ce7); }

.passkey-actions .btn {
  border-radius: 8px;
  border: none;
  font-size: 0.8rem;
  padding: 0.25rem 0.5rem;
  margin: 0 2px;
}

.device-status-badge {
  font-size: 0.7rem;
  padding: 0.25rem 0.5rem;
  border-radius: 10px;
}

.last-used-text {
  font-size: 0.75rem;
  color: #6c757d;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const modal = document.getElementById('passkeyManagementModal');
  const addPasskeyBtn = document.getElementById('addPasskeyBtn');
  const refreshBtn = document.getElementById('refreshPasskeysBtn');
  const passkeyList = document.getElementById('passkeyList');
  const noPasskeysMessage = document.getElementById('noPasskeysMessage');
  const passkeyCount = document.getElementById('passkeyCount');
  const newPasskeyNameInput = document.getElementById('newPasskeyName');
  
  // Rename modal elements
  const renameModal = document.getElementById('renamePasskeyModal');
  const renameInput = document.getElementById('renamePasskeyInput');
  const saveNameBtn = document.getElementById('savePasskeyNameBtn');
  let currentRenamePasskeyId = null;

  // Check passkey support
  if (!window.passkeyClient.isSupported) {
    document.getElementById('passkeyNotSupported').classList.remove('d-none');
    document.getElementById('addPasskeySection').style.display = 'none';
  }

  // Load passkeys when modal opens
  modal.addEventListener('shown.bs.modal', function() {
    loadPasskeys();
  });

  // Add new passkey
  addPasskeyBtn.addEventListener('click', async function() {
    try {
      PasskeyUtils.setButtonLoading(this, true);
      
      const deviceName = newPasskeyNameInput.value.trim() || null;
      const result = await window.passkeyClient.registerPasskey(deviceName);
      
      if (result.success) {
        PasskeyUtils.showSuccess('Passkey added successfully!');
        newPasskeyNameInput.value = '';
        loadPasskeys();
      } else {
        PasskeyUtils.showError(result.error || 'Failed to add passkey');
      }
    } catch (error) {
      console.error('Add passkey error:', error);
      PasskeyUtils.showError(error.message || 'Failed to add passkey');
    } finally {
      PasskeyUtils.setButtonLoading(this, false);
    }
  });

  // Refresh passkeys
  refreshBtn.addEventListener('click', function() {
    loadPasskeys();
  });

  // Save renamed passkey
  saveNameBtn.addEventListener('click', async function() {
    if (!currentRenamePasskeyId) return;
    
    try {
      PasskeyUtils.setButtonLoading(this, true);
      
      const newName = renameInput.value.trim();
      if (!newName) {
        PasskeyUtils.showError('Please enter a device name');
        return;
      }
      
      const result = await window.passkeyClient.updatePasskey(currentRenamePasskeyId, {
        device_name: newName
      });
      
      if (result.success) {
        PasskeyUtils.showSuccess('Passkey renamed successfully!');
        bootstrap.Modal.getInstance(renameModal).hide();
        loadPasskeys();
      } else {
        PasskeyUtils.showError(result.error || 'Failed to rename passkey');
      }
    } catch (error) {
      console.error('Rename passkey error:', error);
      PasskeyUtils.showError(error.message || 'Failed to rename passkey');
    } finally {
      PasskeyUtils.setButtonLoading(this, false);
    }
  });

  // Load and display passkeys
  async function loadPasskeys() {
    try {
      const result = await window.passkeyClient.getUserPasskeys();
      
      if (result.success) {
        displayPasskeys(result.passkeys);
        passkeyCount.textContent = result.count;
      } else {
        PasskeyUtils.showError('Failed to load passkeys');
      }
    } catch (error) {
      console.error('Load passkeys error:', error);
      PasskeyUtils.showError('Failed to load passkeys');
    }
  }

  // Display passkeys in the list
  function displayPasskeys(passkeys) {
    passkeyList.innerHTML = '';
    
    if (passkeys.length === 0) {
      noPasskeysMessage.style.display = 'block';
      return;
    }
    
    noPasskeysMessage.style.display = 'none';
    
    passkeys.forEach(passkey => {
      const passkeyItem = createPasskeyItem(passkey);
      passkeyList.appendChild(passkeyItem);
    });
  }

  // Create passkey list item
  function createPasskeyItem(passkey) {
    const item = document.createElement('div');
    item.className = 'list-group-item passkey-item';
    
    const lastUsed = passkey.last_used_at 
      ? PasskeyUtils.formatDate(passkey.last_used_at)
      : 'Never used';
    
    const statusBadge = passkey.is_active 
      ? '<span class="badge bg-success device-status-badge">Active</span>'
      : '<span class="badge bg-secondary device-status-badge">Inactive</span>';
    
    item.innerHTML = `
      <div class="d-flex align-items-center justify-content-between">
        <div class="d-flex align-items-center">
          <div class="passkey-device-icon ${passkey.device_type} me-3">
            <i class="${passkey.device_icon}"></i>
          </div>
          <div>
            <h6 class="mb-1 fw-semibold">${passkey.device_name}</h6>
            <div class="d-flex align-items-center gap-2">
              ${statusBadge}
              <small class="last-used-text">Last used: ${lastUsed}</small>
            </div>
            <small class="text-muted">Added ${PasskeyUtils.formatDate(passkey.created_at)}</small>
          </div>
        </div>
        
        <div class="passkey-actions">
          <button class="btn btn-outline-primary btn-sm rename-passkey-btn" 
                  data-passkey-id="${passkey.id}" 
                  data-current-name="${passkey.device_name}"
                  title="Rename">
            <i class="fas fa-edit"></i>
          </button>
          
          <button class="btn ${passkey.is_active ? 'btn-outline-warning' : 'btn-outline-success'} btn-sm toggle-passkey-btn" 
                  data-passkey-id="${passkey.id}" 
                  data-is-active="${passkey.is_active}"
                  title="${passkey.is_active ? 'Disable' : 'Enable'}">
            <i class="fas ${passkey.is_active ? 'fa-pause' : 'fa-play'}"></i>
          </button>
          
          <button class="btn btn-outline-danger btn-sm delete-passkey-btn" 
                  data-passkey-id="${passkey.id}"
                  title="Delete">
            <i class="fas fa-trash"></i>
          </button>
        </div>
      </div>
    `;

    // Add event listeners
    item.querySelector('.rename-passkey-btn').addEventListener('click', function() {
      currentRenamePasskeyId = this.dataset.passkeyId;
      renameInput.value = this.dataset.currentName;
      new bootstrap.Modal(renameModal).show();
    });

    item.querySelector('.toggle-passkey-btn').addEventListener('click', async function() {
      const passkeyId = this.dataset.passkeyId;
      const isActive = this.dataset.isActive === 'true';
      
      try {
        PasskeyUtils.setButtonLoading(this, true);
        
        const result = await window.passkeyClient.updatePasskey(passkeyId, {
          is_active: !isActive
        });
        
        if (result.success) {
          PasskeyUtils.showSuccess(`Passkey ${!isActive ? 'enabled' : 'disabled'} successfully!`);
          loadPasskeys();
        } else {
          PasskeyUtils.showError(result.error || 'Failed to update passkey');
        }
      } catch (error) {
        console.error('Toggle passkey error:', error);
        PasskeyUtils.showError(error.message || 'Failed to update passkey');
      } finally {
        PasskeyUtils.setButtonLoading(this, false);
      }
    });

    item.querySelector('.delete-passkey-btn').addEventListener('click', async function() {
      const passkeyId = this.dataset.passkeyId;
      
      if (!confirm('Are you sure you want to delete this passkey? This action cannot be undone.')) {
        return;
      }
      
      try {
        PasskeyUtils.setButtonLoading(this, true);
        
        const result = await window.passkeyClient.deletePasskey(passkeyId);
        
        if (result.success) {
          PasskeyUtils.showSuccess('Passkey deleted successfully!');
          loadPasskeys();
        } else {
          PasskeyUtils.showError(result.error || 'Failed to delete passkey');
        }
      } catch (error) {
        console.error('Delete passkey error:', error);
        PasskeyUtils.showError(error.message || 'Failed to delete passkey');
      } finally {
        PasskeyUtils.setButtonLoading(this, false);
      }
    });

    return item;
  }
});
</script> 