# Complete DaySave Staging Deployment
# Full deployment with Docker, SSL, and all services
name: Full Staging Deploy

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID || 'daysave' }}
  GCP_ZONE: ${{ vars.GCP_ZONE || 'asia-southeast1-a' }}
  VM_NAME: daysave-staging
  
jobs:
  full-staging-deploy:
    name: Complete Staging Deployment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Create fresh staging VM with reserved IP
      run: |
        echo "🚀 Setting up fresh staging VM with reserved static IP..."
        
        # Delete existing VM if it exists
        if gcloud compute instances describe ${{ env.VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.PROJECT_ID }} &>/dev/null; then
          echo "🗑️ Deleting existing VM for fresh start..."
          gcloud compute instances delete ${{ env.VM_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --project=${{ env.PROJECT_ID }} \
            --quiet
          echo "⏳ Waiting for deletion to complete..."
          sleep 30
        fi
        
        # Create VM with reserved static IP
        echo "📦 Creating fresh VM..."
        gcloud compute instances create ${{ env.VM_NAME }} \
          --project=${{ env.PROJECT_ID }} \
          --zone=${{ env.GCP_ZONE }} \
          --machine-type=e2-medium \
          --image-family=ubuntu-2204-lts \
          --image-project=ubuntu-os-cloud \
          --service-account=daysave-production@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
          --scopes=cloud-platform \
          --tags=http-server,https-server \
          --boot-disk-size=30GB \
          --boot-disk-type=pd-standard \
          --address=daysave-staging-ip
          
        echo "⏳ Waiting for VM to initialize..."
        sleep 90
        
        VM_IP=$(gcloud compute instances describe ${{ env.VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.PROJECT_ID }} --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
        echo "🌐 VM IP: $VM_IP"
        echo "VM_IP=$VM_IP" >> $GITHUB_ENV
        
        # Verify we got the expected IP
        if [ "$VM_IP" = "34.126.109.143" ]; then
          echo "✅ Confirmed: VM has the reserved IP address"
        else
          echo "⚠️ Warning: VM IP ($VM_IP) differs from expected (34.126.109.143)"
        fi
        
    - name: Install Docker and dependencies
      run: |
        echo "🐳 Installing Docker and dependencies..."
        gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.PROJECT_ID }} --command="
          # Update system
          sudo apt-get update
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo '📦 Installing Docker...'
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker \$USER
            sudo systemctl enable docker
            sudo systemctl start docker
          else
            echo '✅ Docker already installed'
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null; then
            echo '📦 Installing Docker Compose...'
            sudo curl -L \"https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo '✅ Docker Compose already installed'
          fi
          
          # Install additional tools
          sudo apt-get install -y git curl wget unzip
          
          echo '✅ Dependencies installed successfully'
        "
        
    - name: Deploy application code
      run: |
        echo "📂 Deploying application code..."
        gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.PROJECT_ID }} --command="
          # Clone or update repository
          if [ ! -d \"daysave_v1.4.1\" ]; then
            echo '📥 Cloning repository...'
            git clone https://github.com/${{ github.repository }}.git daysave_v1.4.1
          else
            echo '🔄 Updating repository...'
            cd daysave_v1.4.1
            git fetch origin
            cd ..
          fi
          
          cd daysave_v1.4.1
          git checkout ${{ github.sha }}
          
          echo '✅ Code deployed successfully'
        "
        
    - name: Configure environment variables
      run: |
        echo "⚙️ Configuring environment variables..."
        gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.PROJECT_ID }} --command="
          cd daysave_v1.4.1
          
          # Create production environment file
          cat > .env.production << 'EOF'
        # ===== APPLICATION CONFIGURATION =====
        NODE_ENV=production
        APP_PORT=3000
        SESSION_SECRET=${{ secrets.SESSION_SECRET }}
        
        # ===== DATABASE CONFIGURATION =====
        DB_HOST=db
        DB_PORT=3306
        DB_USER=daysave
        DB_USER_PASSWORD=${{ secrets.DB_USER_PASSWORD }}
        DB_NAME=daysave_v141
        DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
        
        # ===== REDIS CONFIGURATION =====
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        
        # ===== GOOGLE CLOUD CONFIGURATION =====
        GOOGLE_CLOUD_PROJECT_ID=${{ env.PROJECT_ID }}
        GOOGLE_CLOUD_STORAGE_BUCKET=${{ secrets.GOOGLE_CLOUD_STORAGE_BUCKET }}
        GOOGLE_CLOUD_SPEECH_LANGUAGE=en-US
        GOOGLE_CLOUD_VISION_LANGUAGE=en
        
        # ===== OPENAI CONFIGURATION =====
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        
        # ===== OAUTH CONFIGURATION =====
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        MICROSOFT_CLIENT_ID=${{ secrets.MICROSOFT_CLIENT_ID }}
        MICROSOFT_CLIENT_SECRET=${{ secrets.MICROSOFT_CLIENT_SECRET }}
        
        # ===== EMAIL CONFIGURATION =====
        GMAIL_USER=${{ secrets.GMAIL_USER }}
        GMAIL_PASS=${{ secrets.GMAIL_PASS }}
        GMAIL_FROM=${{ secrets.GMAIL_FROM }}
        
        # ===== DOMAIN CONFIGURATION =====
        BASE_URL=${{ secrets.BASE_URL }}
        ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
        WEBAUTHN_RP_ID=${{ secrets.WEBAUTHN_RP_ID }}
        WEBAUTHN_RP_NAME=DaySave
        
        # ===== SECURITY CONFIGURATION =====
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
        BCRYPT_ROUNDS=12
        
        # ===== TEST CREDENTIALS =====
        TEST_ADMIN=${{ secrets.TEST_ADMIN }}
        TEST_USER=${{ secrets.TEST_USER }}
        TEST_SECRET=${{ secrets.TEST_SECRET }}
        
        # ===== GOOGLE MAPS CONFIGURATION =====
        GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}
        
        # ===== FILE UPLOAD CONFIGURATION =====
        MAX_FILE_SIZE=52428800
        ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,application/pdf,text/plain,video/mp4,audio/mpeg,audio/wav
        
        # ===== MULTIMEDIA ANALYSIS CONFIGURATION =====
        MULTIMEDIA_TEMP_DIR=/usr/src/app/multimedia-temp
        THUMBNAIL_COUNT=5
        SPEAKER_CONFIDENCE_THRESHOLD=0.7
        
        # ===== LOGGING CONFIGURATION =====
        LOG_LEVEL=info
        LOG_FILE_PATH=/usr/src/app/logs/app.log
        ENABLE_SQL_LOGGING=false
        ENABLE_MULTIMEDIA_CONSOLE_LOGGING=false
        ENABLE_STARTUP_VALIDATION_LOGGING=true
        ENABLE_PERFORMANCE_CONSOLE_LOGGING=false
        ENABLE_PROCESSOR_STEP_LOGGING=false
        ENABLE_AUTH_EVENT_LOGGING=true
        ENABLE_STATUS_POLLING_LOGGING=false
        ENABLE_ANALYSIS_REQUEST_LOGGING=false
        ENABLE_PERFORMANCE_ALERT_LOGGING=false
        EOF
          
          echo '✅ Environment configured successfully'
        "
        
    - name: Start application services
      run: |
        echo "🚀 Starting application services..."
        gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.PROJECT_ID }} --command="
          cd daysave_v1.4.1
          
          # Stop any existing containers
          sudo docker-compose -f docker-compose.production.yml --env-file .env.production down || true
          
          # Pull latest images
          sudo docker-compose -f docker-compose.production.yml --env-file .env.production pull
          
          # Start services
          sudo docker-compose -f docker-compose.production.yml --env-file .env.production up -d
          
          echo '⏳ Waiting for services to start...'
          sleep 30
          
          # Check service status
          sudo docker-compose -f docker-compose.production.yml --env-file .env.production ps
          
          echo '✅ Services started successfully'
        "
        
    - name: Setup SSL certificates
      run: |
        echo "🔒 Setting up SSL certificates..."
        gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.PROJECT_ID }} --command="
          cd daysave_v1.4.1
          
          # Install Certbot if not present
          if ! command -v certbot &> /dev/null; then
            echo '📦 Installing Certbot...'
            sudo apt-get update
            sudo apt-get install -y certbot python3-certbot-nginx
          fi
          
          # Setup Nginx configuration for SSL
          sudo tee /etc/nginx/sites-available/daysave.app > /dev/null << 'NGINX_EOF'
        server {
            listen 80;
            server_name daysave.app www.daysave.app;
            
            # Redirect HTTP to HTTPS
            return 301 https://\$server_name\$request_uri;
        }
        
        server {
            listen 443 ssl http2;
            server_name daysave.app www.daysave.app;
            
            # SSL configuration will be added by Certbot
            
            location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_cache_bypass \$http_upgrade;
            }
        }
        NGINX_EOF
          
          # Enable site
          sudo ln -sf /etc/nginx/sites-available/daysave.app /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Test Nginx configuration
          sudo nginx -t
          
          # Reload Nginx
          sudo systemctl reload nginx
          
          # Obtain SSL certificate
          sudo certbot --nginx -d daysave.app -d www.daysave.app --non-interactive --agree-tos --email admin@daysave.app
          
          echo '✅ SSL certificates configured successfully'
        "
        
    - name: Run comprehensive health checks and tests
      run: |
        echo "🏥 Running comprehensive health checks and tests..."
        
        # Wait for application to be ready
        echo "⏳ Waiting for application to fully initialize..."
        sleep 120
        
        # Test 1: HTTP redirect
        echo "🌐 Test 1: HTTP redirect..."
        if curl -I http://daysave.app 2>/dev/null | grep -q "301\|302"; then
          echo "✅ HTTP redirect working"
        else
          echo "❌ HTTP redirect failed"
        fi
        
        # Test 2: HTTPS
        echo "🔒 Test 2: HTTPS connectivity..."
        if curl -I https://daysave.app 2>/dev/null | grep -q "200"; then
          echo "✅ HTTPS working"
        else
          echo "❌ HTTPS failed"
        fi
        
        # Test 3: Application health endpoint
        echo "💓 Test 3: Application health endpoint..."
        if curl -f https://daysave.app/health 2>/dev/null; then
          echo "✅ Health endpoint working"
        else
          echo "❌ Health endpoint failed"
        fi
        
        # Test 4: Database connectivity
        echo "💾 Test 4: Database connectivity..."
        gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.PROJECT_ID }} --command="
          cd daysave_v1.4.1
          if sudo docker-compose exec -T db mysqladmin ping -h localhost -u root -p\$DB_ROOT_PASSWORD 2>/dev/null; then
            echo '✅ Database connectivity working'
          else
            echo '❌ Database connectivity failed'
          fi
        "
        
        # Test 5: OAuth endpoints
        echo "🔐 Test 5: OAuth endpoints..."
        if curl -f https://daysave.app/auth/google 2>/dev/null | grep -q "google"; then
          echo "✅ OAuth endpoints accessible"
        else
          echo "❌ OAuth endpoints failed"
        fi
        
        # Test 6: File upload endpoint
        echo "📁 Test 6: File upload endpoint accessibility..."
        if curl -I https://daysave.app/files/upload 2>/dev/null | grep -q "200\|302\|401"; then
          echo "✅ File upload endpoint accessible"
        else
          echo "❌ File upload endpoint failed"
        fi
        
        # Test 7: SSL certificate validity
        echo "🔒 Test 7: SSL certificate validity..."
        if echo | openssl s_client -servername daysave.app -connect daysave.app:443 2>/dev/null | openssl x509 -noout -dates; then
          echo "✅ SSL certificate valid"
        else
          echo "❌ SSL certificate invalid"
        fi
        
        echo "✅ All health checks completed"
        
    - name: Display deployment summary
      run: |
        echo "🎉 Deployment Summary:"
        echo "================================"
        echo "🌐 Domain: https://daysave.app"
        echo "🖥️  VM: ${{ env.VM_NAME }}"
        echo "📍 IP: ${{ env.VM_IP }}"
        echo "🔒 SSL: Enabled with Let's Encrypt"
        echo "🐳 Services: Docker Compose"
        echo "💾 Database: MySQL 8.0"
        echo "🔑 OAuth: Enabled"
        echo "================================"
        echo "✅ Full staging deployment completed!"
        echo "🔗 Access your application at: https://daysave.app"
