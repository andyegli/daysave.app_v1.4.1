name: 🚀 Staging Deployment (Fixed Order) - MANUAL TRIGGER ONLY

on:
  workflow_dispatch:
    inputs:
      vm_action:
        description: 'VM Action'
        required: true
        default: 'recreate'
        type: choice
        options:
          - recreate
          - reuse
      instance_type:
        description: 'Instance Type'
        required: true
        default: 'e2-medium'
        type: choice
        options:
          - e2-micro
          - e2-small
          - e2-medium
          - e2-standard-2

env:
  PROJECT_ID: daysave
  ZONE: asia-southeast1-a
  INSTANCE_NAME: daysave-staging
  STATIC_IP_NAME: daysave-staging-ip
  STATIC_IP: 34.126.109.143

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: ⚙️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🧹 Clean up existing VM (if recreating)
        if: ${{ github.event.inputs.vm_action == 'recreate' }}
        run: |
          echo "🗑️ Removing existing VM instance..."
          if gcloud compute instances describe $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID >/dev/null 2>&1; then
            echo "VM exists, deleting..."
            gcloud compute instances delete $INSTANCE_NAME \
              --zone=$ZONE \
              --project=$PROJECT_ID \
              --quiet
            echo "✅ VM deleted successfully"
          else
            echo "ℹ️ VM doesn't exist, nothing to delete"
          fi

      - name: 🏗️ Create VM with static IP
        run: |
          echo "🚀 Creating VM with reserved static IP..."
          gcloud compute instances create $INSTANCE_NAME \
            --project=$PROJECT_ID \
            --zone=$ZONE \
            --machine-type=${{ github.event.inputs.instance_type }} \
            --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=default,address=$STATIC_IP \
            --maintenance-policy=MIGRATE \
            --provisioning-model=STANDARD \
            --service-account=daysave-cicd@$PROJECT_ID.iam.gserviceaccount.com \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --create-disk=auto-delete=yes,boot=yes,device-name=$INSTANCE_NAME,image=projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240830,mode=rw,size=50,type=projects/$PROJECT_ID/zones/$ZONE/diskTypes/pd-standard \
            --no-shielded-secure-boot \
            --shielded-vtpm \
            --shielded-integrity-monitoring \
            --labels=environment=staging,project=daysave \
            --reservation-affinity=any
          echo "✅ VM created successfully"

      - name: ⏳ Wait for VM to be ready
        run: |
          echo "⏳ Waiting for VM to be ready for SSH..."
          for i in {1..30}; do
            if gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="echo 'VM is ready'" --ssh-flag="-o ConnectTimeout=10" >/dev/null 2>&1; then
              echo "✅ VM is ready for SSH"
              break
            fi
            echo "Attempt $i/30: VM not ready yet, waiting 10 seconds..."
            sleep 10
          done

      # STEP 1: INSTALL DEPENDENCIES
      - name: 🔧 Install system dependencies
        run: |
          echo "🔧 Installing Docker and system dependencies..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            set -e
            echo '📦 Updating system packages...'
            sudo apt-get update -y
            
            echo '🐳 Installing Docker...'
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update -y
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            
            echo '🔧 Installing Docker Compose...'
            sudo curl -L \"https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            echo '👤 Adding user to docker group...'
            sudo usermod -aG docker \$USER
            
            echo '🔧 Installing additional tools...'
            sudo apt-get install -y git curl wget unzip
            
            echo '✅ Dependencies installed successfully'
          "

      # STEP 2: DEPLOY CODE
      - name: 📂 Deploy application code
        run: |
          echo "📂 Deploying application code..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            set -e
            echo '📥 Cloning repository...'
            if [ -d 'daysave_v1.4.1' ]; then
              rm -rf daysave_v1.4.1
            fi
            git clone https://github.com/andyegli/daysave.app_v1.4.1.git daysave_v1.4.1
            cd daysave_v1.4.1
            git checkout ${{ github.sha }}
            echo '✅ Code deployed successfully'
          "

      # STEP 3: CONFIGURE ENVIRONMENT
      - name: ⚙️ Configure environment variables
        run: |
          echo "⚙️ Configuring environment variables..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            cd daysave_v1.4.1
            cat > .env.production << 'EOF'
          NODE_ENV=production
          APP_PORT=3000
          SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          
          # Database Configuration
          DB_HOST=db
          DB_PORT=3306
          DB_USER=daysave
          DB_USER_PASSWORD=${{ secrets.DB_USER_PASSWORD }}
          DB_NAME=daysave_v141
          DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
          
          # Redis Configuration
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          
          # Domain Configuration
          BASE_URL=https://daysave.app
          ALLOWED_ORIGINS=https://daysave.app,https://www.daysave.app
          WEBAUTHN_RP_ID=daysave.app
          WEBAUTHN_RP_NAME=DaySave
          WEBAUTHN_ORIGIN=https://daysave.app
          
          # OAuth Configuration (disabled for staging)
          GOOGLE_CLIENT_ID=
          GOOGLE_CLIENT_SECRET=
          MICROSOFT_CLIENT_ID=
          MICROSOFT_CLIENT_SECRET=
          
          # Email Configuration (disabled for staging)
          GMAIL_USER=
          GMAIL_PASS=
          GMAIL_FROM=
          
          # API Keys (disabled for staging)
          OPENAI_API_KEY=
          GOOGLE_MAPS_API_KEY=
          
          # Testing Configuration
          TEST_ADMIN=${{ secrets.TEST_ADMIN }}
          TEST_USER=${{ secrets.TEST_USER }}
          TEST_SECRET=${{ secrets.TEST_SECRET }}
          
          # File Upload Configuration
          MAX_FILE_SIZE=104857600
          ALLOWED_FILE_TYPES=pdf,doc,docx,txt,jpg,jpeg,png,gif,mp4,avi,mov,mp3,wav
          
          # Security Configuration
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100
          EOF
            echo '✅ Environment configured successfully'
          "

      # STEP 4: BUILD CONTAINERS (but don't start app yet)
      - name: 🐳 Build Docker containers
        run: |
          echo "🐳 Building Docker containers..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            cd daysave_v1.4.1
            echo '🏗️ Building application image...'
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production build app
            
            echo '📥 Pulling supporting service images...'
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production pull db redis nginx
            
            echo '✅ All containers built/pulled successfully'
          "

      # STEP 5: START DATABASE AND REDIS ONLY
      - name: 🗄️ Start database and Redis services
        run: |
          echo "🗄️ Starting database and Redis services..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            cd daysave_v1.4.1
            echo '🚀 Starting database and Redis...'
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production up -d db redis
            
            echo '⏳ Waiting for database to be healthy...'
            for i in {1..30}; do
              if sudo docker-compose -f docker-compose.production.yml --env-file .env.production exec -T db mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} -e 'SELECT 1' >/dev/null 2>&1; then
                echo '✅ Database is ready'
                break
              fi
              echo \"Attempt \$i/30: Database not ready yet, waiting 10 seconds...\"
              sleep 10
            done
            
            echo '✅ Database and Redis services started successfully'
          "

      # STEP 6: RUN DATABASE MIGRATIONS
      - name: 🔄 Run database migrations
        run: |
          echo "🔄 Running database migrations..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            cd daysave_v1.4.1
            echo '🏗️ Creating database if not exists...'
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production exec -T db mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} -e '
              CREATE DATABASE IF NOT EXISTS daysave_v141;
              GRANT ALL PRIVILEGES ON daysave_v141.* TO \"daysave\"@\"%\";
              FLUSH PRIVILEGES;
            '
            
            echo '🔄 Running migrations...'
            sudo docker run --rm --network daysave_v141_daysave-internal \
              -v \$(pwd):/app -w /app \
              -e DB_HOST=daysave-db \
              -e DB_USER=daysave \
              -e DB_USER_PASSWORD=${{ secrets.DB_USER_PASSWORD }} \
              -e DB_NAME=daysave_v141 \
              -e NODE_ENV=production \
              gcr.io/daysave/daysave:latest npx sequelize-cli db:migrate
            
            echo '✅ Database migrations completed successfully'
          "

      # STEP 7: VERIFY DATABASE SCHEMA
      - name: ✅ Verify database schema
        run: |
          echo "✅ Verifying database schema..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            cd daysave_v1.4.1
            echo '📋 Checking database tables...'
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production exec -T db mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} -e '
              USE daysave_v141;
              SHOW TABLES;
              SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = \"daysave_v141\";
            '
            echo '✅ Database schema verification completed'
          "

      # STEP 8: SEED TEST USERS
      - name: 👤 Seed test users
        run: |
          echo "👤 Seeding test users..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            cd daysave_v1.4.1
            echo '🌱 Running database seeders...'
            sudo docker run --rm --network daysave_v141_daysave-internal \
              -v \$(pwd):/app -w /app \
              -e DB_HOST=daysave-db \
              -e DB_USER=daysave \
              -e DB_USER_PASSWORD=${{ secrets.DB_USER_PASSWORD }} \
              -e DB_NAME=daysave_v141 \
              -e NODE_ENV=production \
              -e TEST_ADMIN=${{ secrets.TEST_ADMIN }} \
              -e TEST_USER=${{ secrets.TEST_USER }} \
              -e TEST_SECRET=${{ secrets.TEST_SECRET }} \
              gcr.io/daysave/daysave:latest npx sequelize-cli db:seed:all
            
            echo '✅ Test users seeded successfully'
          "

      # STEP 9: NOW START THE APPLICATION
      - name: 🚀 Start application service
        run: |
          echo "🚀 Starting application service..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            cd daysave_v1.4.1
            echo '🚀 Starting application container...'
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production up -d app
            
            echo '⏳ Waiting for application to be healthy...'
            for i in {1..30}; do
              if sudo docker-compose -f docker-compose.production.yml --env-file .env.production exec -T app curl -f http://localhost:3000/health >/dev/null 2>&1; then
                echo '✅ Application is healthy'
                break
              fi
              echo \"Attempt \$i/30: Application not ready yet, waiting 10 seconds...\"
              sleep 10
            done
            
            echo '✅ Application started successfully'
          "

      # STEP 10: START REVERSE PROXY AND SSL
      - name: 🔒 Setup reverse proxy and SSL
        run: |
          echo "🔒 Setting up reverse proxy and SSL..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            cd daysave_v1.4.1
            echo '🌐 Starting Nginx reverse proxy...'
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production up -d nginx
            
            echo '⏳ Waiting for Nginx to be ready...'
            sleep 15
            
            echo '🔐 Setting up SSL certificates...'
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production exec -T nginx sh -c '
              if [ ! -f /etc/letsencrypt/live/daysave.app/fullchain.pem ]; then
                echo \"Obtaining SSL certificate...\"
                certbot --nginx --non-interactive --agree-tos --email admin@daysave.app -d daysave.app -d www.daysave.app
              else
                echo \"SSL certificate already exists\"
              fi
            '
            
            echo '✅ Reverse proxy and SSL setup completed'
          "

      # STEP 11: COMPREHENSIVE HEALTH CHECKS
      - name: 🏥 Run comprehensive health checks
        run: |
          echo "🏥 Running comprehensive health checks..."
          
          echo "⏳ Waiting for services to fully initialize..."
          sleep 30
          
          echo "🌐 Test 1: HTTP redirect..."
          if curl -I http://daysave.app 2>/dev/null | grep -q "301\|302"; then
            echo "✅ HTTP redirect working"
          else
            echo "❌ HTTP redirect failed"
            curl -I http://daysave.app || true
          fi
          
          echo "🔒 Test 2: HTTPS connectivity..."
          if curl -I https://daysave.app 2>/dev/null | grep -q "200"; then
            echo "✅ HTTPS working"
          else
            echo "❌ HTTPS failed"
            curl -I https://daysave.app || true
          fi
          
          echo "💓 Test 3: Application health endpoint..."
          if curl -f https://daysave.app/health 2>/dev/null; then
            echo "✅ Health endpoint working"
          else
            echo "❌ Health endpoint failed"
          fi
          
          echo "💾 Test 4: Database connectivity..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            cd daysave_v1.4.1
            if sudo docker-compose -f docker-compose.production.yml --env-file .env.production exec -T db mysql -u daysave -p${{ secrets.DB_USER_PASSWORD }} -e 'USE daysave_v141; SELECT COUNT(*) FROM users;' >/dev/null 2>&1; then
              echo '✅ Database connectivity working'
            else
              echo '❌ Database connectivity failed'
            fi
          "
          
          echo "🔐 Test 5: Authentication endpoints..."
          if curl -f https://daysave.app/auth/login 2>/dev/null >/dev/null; then
            echo "✅ Auth endpoints accessible"
          else
            echo "❌ Auth endpoints failed"
          fi

      # STEP 12: POST-DEPLOYMENT TASKS
      - name: 📋 Post-deployment summary
        run: |
          echo "📋 Deployment Summary"
          echo "===================="
          echo "🌐 Application URL: https://daysave.app"
          echo "🏥 Health Check: https://daysave.app/health"
          echo "🔐 Login Page: https://daysave.app/auth/login"
          echo "📊 Admin Panel: https://daysave.app/admin"
          echo ""
          echo "🔧 VM Details:"
          echo "- Instance: $INSTANCE_NAME"
          echo "- Zone: $ZONE"
          echo "- Static IP: $STATIC_IP"
          echo "- Instance Type: ${{ github.event.inputs.instance_type }}"
          echo ""
          echo "✅ Deployment completed successfully!"

      - name: 🧹 Cleanup on failure
        if: failure()
        run: |
          echo "🧹 Cleaning up failed deployment..."
          gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --project=$PROJECT_ID --command="
            cd daysave_v1.4.1 2>/dev/null || true
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production logs --tail=50 || true
            sudo docker ps -a || true
          " || true
